
@model DashboardPadrao 
@{
	ViewData["Title"] = "Dashboard";
}

<div class="text-center">
    <h1 class="display-4">@ViewData["Title"]</h1>
    <p> Temos @Model.dashboard_vendas.TotalLancamentos lançamentos financeiros</p>
</div>
<br>



<h3>Dashboard de Vendas</h3>
<div class="row"> <!-- insere uma fileira de colunas -->
	<div class="p-3 col fix_height"> <!-- insere colunacom ajuste de altura-->
		<div class="card h-100">
		  <div class="card-body">
			<h5 class="card-title">R$ @Model.dashboard_vendas.valor1.ToString("0.00")</h5>
			<p class="card-text">Total de Vendas</p>
			<div class="d-flex flex-row"> <!--define a direção dos itens flexíveis, na horizontal, em um contêiner flexível com utilitários de direção-->
				<div class="flex-fill"> <!--força os itens flexíveis a comprimentos iguais-->
					<p class="fw-lighter">Meta: valor</p>
				</div>
				<div class="flex-fill"> <!--força os itens flexíveis a comprimentos iguais-->
					<p class="fw-lighter">%Meta: valor%</p>
				</div>
			</div>
		  </div>
		</div>
		
	</div>
	<div class="p-3 col-md fix_height"> <!--insere coluna com tamanho medio e ajuste de altura-->
		<div class="card h-100">
		  <div class="card-body">
			<h5 class="card-title">R$ @Model.dashboard_vendas.valor2.ToString("0.00")</h5>
			<p class="card-text">Total de Custos</p>
		  </div>
		</div>
	</div>
	<div class="p-3 col-md fix_height"> <!--insere coluna com tamanho medio e ajuste de altura-->
		<div class="card h-100">
		  <div class="card-body">
			<h5 class="card-title">R$ @Model.dashboard_vendas.valor3.ToString("0.00")</h5>
			<p class="card-text">Resultado (Lucro/Prejuízo)</p>
		  </div>
		</div>
	</div>
	<div class="p-3 col-md fix_height"> <!--insere coluna com tamanho medio e ajuste de altura-->
		<div class="card h-100">
		  <div class="card-body">
			<h5 class="card-title">@Model.dashboard_vendas.valor4.ToString()</h5>
			<p class="card-text">Número de pedidos</p>
		  </div>
		</div>
	</div>
	<div class="p-3 col-md fix_height"> <!--insere coluna com tamanho medio e ajuste de altura-->
		<div class="card h-100">
		  <div class="card-body">
			<h5 class="card-title">@Model.dashboard_vendas.valor5.ToString("0.00")</h5>
			<p class="card-text">Itens Vendidos</p>
		  </div>
		</div>
	</div>


</div>







<hr />
<div class="container-fluid"> <!--cria um conteiner de largura total-->
  <div class="row g-2"><!--fileira com uma calha tamanho 2-->
	<div class="p-4 border col-md-8 fix_height"> <!--insere uma coluna, tamanho médio 8, 4 de preenchimento, borda de separação entre colunas e ajuste de altura-->
		<!DOCTYPE html>
		<html>
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<body>
		<canvas id="myChart1"></canvas>


		<script>
		var xValues = ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"];

		new Chart("myChart1", {
		  type: "bar",
		  data: {
			labels: xValues,
			datasets: [{
			  label: "Total de Vendas",
			  backgroundColor: "#00FFFF",
			  data: [@Model.dashboard_vendas.TotalVendas[0].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[1].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[2].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[3].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[4].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[5].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[6].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[7].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[8].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[9].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[10].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[11].ToString("0.00").Replace(",", ".")],
			  stack: 'stack 0',
			  fill: false
			}]
		  },
		  options: {

			legend: {display: true},

			title: {
			  display: true,
			  text: "Realizado x Meta"
			},
			scales: {
				  x: {
					display: true,
				  },
				  y: {
					display: true,
					type: 'logarithmic', /*tipo logaritmico facilita a vizualização de dados com valores discrepantes*/
				  } 
				}

		  }
		});
		</script>

		</body>
		</html>
		</div>

	<div class="p-4 border col-md-4 fix_height overflow-auto"> <!--insere uma coluna, tamanho médio 4, 4 de preenchimento, borda de separação entre colunas e ajuste de altura-->
			<!DOCTYPE html>
			<html>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
			<body>

			<canvas id="myChart4"></canvas>

			<script>
			var arr = JSON.parse('@Json.Serialize(Model.dashboard_vendas.Categorias)')
			var arr2 = JSON.parse('@Json.Serialize(Model.dashboard_vendas.CategoriasPrice)')





			new Chart("myChart4", {
			  type: "horizontalBar",
			  data: {
				labels: arr,
				datasets: [{
				  backgroundColor: "#00FFFF",
				  data: arr2,
				  stack: 'Stack 0',
				  fill: false
				}]
			  },
			  options: {
				  responsive: true,
				  maintainAspectRatio: false,
				legend: {display: false},
				title: {
				  display: true,
				  text: "Vendas por Categoria em R$"
				}
			  }
			});
			</script>

			</body>
			</html>
		</div>

  </div>
</div>
<br />
<div class="container-fluid"> <!--cria um conteiner de largura total-->
  <div class="row g-2"> <!--fileira com uma calha tamanho 2-->
	<div class="p-4 border col-md-8 fix_height"><!--insere uma coluna, tamanho médio 8, 4 de preenchimento, borda de separação entre colunas e ajuste de altura-->
		<!DOCTYPE html>
		<html>
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<body>

		<canvas id="myChart"></canvas>

		<script>
		var xValues = ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"];




		new Chart("myChart", {
		  type: "bar",
		  data: {
			labels: xValues,
			datasets: [{
			  label: 'Total de Custos',
			  backgroundColor: "#0000FF",
			  data: [@Model.dashboard_vendas.TotalCustos[0].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[1].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[2].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[3].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[4].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[5].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[6].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[7].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[8].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[9].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[10].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalCustos[11].ToString("0.00").Replace(",", ".")],
			  stack: 'Stack 1',
			  fill: false
			},
			{
			  label: 'Total de Vendas',
			  backgroundColor: "#00FFFF",
			  data: [@Model.dashboard_vendas.TotalVendas[0].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[1].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[2].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[3].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[4].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[5].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[6].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[7].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[8].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[9].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[10].ToString("0.00").Replace(",", "."), @Model.dashboard_vendas.TotalVendas[11].ToString("0.00").Replace(",", ".")],
			  stack: 'Stack 0',
			  fill: false
			}]
		  },
		  options: {
			legend: {display: true},
			title: {
			  display: true,
			  text: "Vendas x Custos"
			},
			scales: {
				  x: {
					display: true,
				  },
				  y: {
					display: true,
					type: 'logarithmic', /*tipo logaritmico facilita a vizualização de dados com valores discrepantes*/
				  } 
				}
		  }
		});
		</script>

		</body>
		</html>
			</div>

		<div class="p-4 border col-md-4 fix_height overflow-auto"><!--insere uma coluna, tamanho médio 4, 4 de preenchimento, borda de separação entre colunas e ajuste de altura-->
			<!DOCTYPE html>
			<html>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
			<body>

			<canvas id="myChart3"></canvas>

			<script>
				
				
				
				var arr = JSON.parse('@Json.Serialize(Model.dashboard_vendas.Categorias)');
				var arr2 = JSON.parse('@Json.Serialize(Model.dashboard_vendas.CategoriasPercent)');
		

			new Chart("myChart3", {
			  type: "horizontalBar",
			  data: {
				labels: arr,
				datasets: [{
				  backgroundColor: "#00FFFF",
				  data: arr2,
				  stack: 'Stack 0',
				  fill: false
				}]
			  },
			  options: {
				  responsive: true,
				  maintainAspectRatio: false,
				legend: {display: false},
				title: {
				  display: true,
				  text: "Vendas por Categoria em %"
				}
			  }
			});
			</script>

			</body>
			</html>
			</div>
  </div>
</div>



			